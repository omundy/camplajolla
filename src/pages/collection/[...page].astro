---
// SERVER SIDE SCRIPTS

import DefaultLayout from '../../layouts/DefaultLayout.astro'
import { Pagination } from 'accessible-astro-components'
import Card from '../../components/Card.astro'
import * as MySQLData from '../../lib/mysql-data.mjs'

export async function getStaticPaths({ paginate }) {
  // The pagination view for a collection with dynamic content (could also be fetched from an API)
  // const response = await fetch('https://jsonplaceholder.typicode.com/posts')
  // const data = await response.json()

  // get data, paginate
  let data = await MySQLData.getData()
  return paginate(data, { pageSize: 24 })
}
// export for page
const { page } = Astro.props

// add array for pagination
page.pages = []
for (let i = 1; i < page.lastPage; i++) {
  page.pages.push(i)
}

console.log(
  'start',
  page.start,
  'end',
  page.end,
  'size',
  page.size,
  'total',
  page.total,
  'currentPage',
  page.currentPage,
  'lastPage',
  page.lastPage,
  'url',
  page.url,
  'pages',
  page.pages
)

// generate / use slug
function getSlug(post) {
  return post.title.replaceAll(' ', '-').toLowerCase()
  // or, use existing slug (below)
}
---

<DefaultLayout title="Collection" description="All the posts">
  <section class="container">
    <h1>Park Database</h1>
  </section>

  <section class="container">
    <div class="row">
      <div class="col-12">
        <div class="items card-group">
          {
            page.data.map((post) => (
              <div class="item">
                <Card url={'/collection/' + post.slug} img={post.img} title={post.title} text={post.text}>
                  {post.body}
                </Card>
              </div>
            ))
          }
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-12 text-center">
        <Pagination
          firstPage={page.url.prev ? '/collection' : null}
          previousPage={page.url.prev ? page.url.prev : null}
          nextPage={page.url.next ? page.url.next : null}
          lastPage={page.url.next ? `/collection/${Math.round(page.total / page.size)}` : null}
          currentPage={page.currentPage}
          totalPages={Math.round(page.total / page.size)}
        />

        <nav aria-label="Page navigation example">
          <ul class="pagination pagination-secondary  justify-content-center">
            {
              page.url.prev && (
                <li class="page-item">
                  <a class="page-link" href={'/collection/' + page.url.prev} aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                  </a>
                </li>
              )
            }
            {
              page.pages &&
                page.pages.map((p) => (
                  <li class="page-item">
                    <a class="page-link" href={'/collection/' + p}>
                      {p}
                    </a>
                  </li>
                ))
            }

            {
              page.url.prev && (
                <li class="page-item">
                  <a class="page-link" href={'/collection/' + page.url.prev} aria-label="e">
                    <span aria-hidden="true">&raquo;</span>
                  </a>
                </li>
              )
            }
          </ul>
        </nav>
        <div class="my-2">
          <em>{page.start + 1}â€“{page.end + 1} of {page.total}</em>
        </div>
      </div>
    </div>
  </section>
</DefaultLayout>

<style lang="scss">
  $grid-breakpoints: (
    xs: 0,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
    xxl: 1400px,
  );

  .items {
    // xs
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    grid-gap: 1rem;

    // sm
    @media (min-width: 576px) {
      grid-template-columns: repeat(2, 1fr);
      grid-gap: 1rem;
    }
    // md
    @media (min-width: 768px) {
      grid-template-columns: repeat(3, 1fr);
      grid-gap: 1rem;
    }
    // lg
    @media (min-width: 992px) {
      grid-template-columns: repeat(4, 1fr);
    }
    // xl
    @media (min-width: 1200px) {
      grid-template-columns: repeat(5, 1fr);
    }
    // xxl
    @media (min-width: 1400px) {
      grid-template-columns: repeat(6, 1fr);
    }
  }
</style>

<style lang="scss" is:global>
  // https://github.com/markteekman/accessible-astro-components

  .pagination {
    --pagination-color: rgb(0,0,0,.4);
    --bs-pagination-bg: rgba(0,0,0,0);
    --bs-link-color: var(--pagination-color);
    --bs-link-hover-color: rgb(0,0,0,.8);
    --bs-border-color:var(--pagination-color);

    // border-color: red;
  }

  //   body .pagination {
  //     a:hover,
  //     a:hover svg {
  //     }
  //     ul.pagination__list {
  //       list-style: none !important;
  //       list-style-type: none !important;
  //       li {
  //         list-style-type: none;
  //         padding-left: 2em;
  //         text-indent: -2em;
  //       }
  //     }
  //   }
</style>
